{"filter":false,"title":"main_textCipher.cpp","tooltip":"/PRO06/main_textCipher.cpp","undoManager":{"mark":4,"position":4,"stack":[[{"start":{"row":0,"column":0},"end":{"row":112,"column":1},"action":"insert","lines":["#include <iostream>","#include <fstream> ","#include <cstring>","","","using namespace std;","","class Encrt{","    int key;","    string file = \"JourneyToTheCenterofTheEarth.txt\";","    ","    char c;","    ","    public: ","    void Encrypt();","    void Decrypt();","    ","   ","};","","void Encrt::Encrypt(){","    cout << \"Key: \" << endl;","    cin >> key;","    ","    fstream fin, fout;","    ","    ","    fin.open(file, fstream::in);","    fout.open(\"input.txt\", fstream::out);","    ","    while(fin >> noskipws >> c){","        int temp = (c + key);","        fout << (char)temp;","    }","    ","    fin.close();","    fout.close();","}","","void Encrt::Decrypt(){","    ","    cout << \"Key: \" << endl;","    cin >> key;","    ","    fstream fin;","    fstream fout;","    char c;","    ","    ","    fin.open(\"input.txt\", fstream::in);","    fout.open(\"output.txt\", fstream::out);","    ","    while(fin >> noskipws >> c){","        int temp = (c - key);","        fout << (char)temp;","    }","    ","    fin.close();","    fout.close();","}","","","","","int main(int argc, char* argv[]){","    ","    string filename;","    bool debug = false;","","    for (int i = 0; i < argc; i++){","        ","         if(strcmp(argv[i], \"-e\") == 0){ //encrypt","             if(i + 1 < argc){","             debug = true;","             filename = argv[i+1];","             Encrt enc;","             enc.Encrypt();","","             ","             }else {","                 cout << \"Encrypt file unsuccessful\" << endl;","                 return 0;","             }","         }   ","         ","         if (strcmp(argv[i],\"-d\") == 0){ //decrypt","             if(i + 1 < argc){","             filename = argv[i+1];","             Encrt enc;","             enc.Decrypt();","             }","         }","         ","         if(strcmp(argv[i], \"-i\") == 0){","             ","            ","         }","         ","         if(strcmp(argv[i], \"-k\") == 0){","             ","         }","         ","         if(strcmp(argv[i], \"-o\") == 0){","             ","             ","         }","         ","    ","    }","    ","    ","    return 0;","}"],"id":7}],[{"start":{"row":0,"column":0},"end":{"row":112,"column":1},"action":"remove","lines":["#include <iostream>","#include <fstream> ","#include <cstring>","","","using namespace std;","","class Encrt{","    int key;","    string file = \"JourneyToTheCenterofTheEarth.txt\";","    ","    char c;","    ","    public: ","    void Encrypt();","    void Decrypt();","    ","   ","};","","void Encrt::Encrypt(){","    cout << \"Key: \" << endl;","    cin >> key;","    ","    fstream fin, fout;","    ","    ","    fin.open(file, fstream::in);","    fout.open(\"input.txt\", fstream::out);","    ","    while(fin >> noskipws >> c){","        int temp = (c + key);","        fout << (char)temp;","    }","    ","    fin.close();","    fout.close();","}","","void Encrt::Decrypt(){","    ","    cout << \"Key: \" << endl;","    cin >> key;","    ","    fstream fin;","    fstream fout;","    char c;","    ","    ","    fin.open(\"input.txt\", fstream::in);","    fout.open(\"output.txt\", fstream::out);","    ","    while(fin >> noskipws >> c){","        int temp = (c - key);","        fout << (char)temp;","    }","    ","    fin.close();","    fout.close();","}","","","","","int main(int argc, char* argv[]){","    ","    string filename;","    bool debug = false;","","    for (int i = 0; i < argc; i++){","        ","         if(strcmp(argv[i], \"-e\") == 0){ //encrypt","             if(i + 1 < argc){","             debug = true;","             filename = argv[i+1];","             Encrt enc;","             enc.Encrypt();","","             ","             }else {","                 cout << \"Encrypt file unsuccessful\" << endl;","                 return 0;","             }","         }   ","         ","         if (strcmp(argv[i],\"-d\") == 0){ //decrypt","             if(i + 1 < argc){","             filename = argv[i+1];","             Encrt enc;","             enc.Decrypt();","             }","         }","         ","         if(strcmp(argv[i], \"-i\") == 0){","             ","            ","         }","         ","         if(strcmp(argv[i], \"-k\") == 0){","             ","         }","         ","         if(strcmp(argv[i], \"-o\") == 0){","             ","             ","         }","         ","    ","    }","    ","    ","    return 0;","}"],"id":8},{"start":{"row":0,"column":0},"end":{"row":107,"column":0},"action":"insert","lines":["#include <iostream>","#include <fstream>","#include <string>","","using namespace std;","","class CaesarCipher {","    int key;","    string inputFile;","    string outputFile;","","public:","    CaesarCipher(const string& input, const string& output) : inputFile(input), outputFile(output) {}","","    void Encrypt();","    void Decrypt();","};","","void CaesarCipher::Encrypt() {","    cout << \"Enter the encryption key: \";","    cin >> key;","","    fstream fin(inputFile, fstream::in);","    fstream fout(outputFile, fstream::out);","","    char c;","    while (fin >> noskipws >> c) {","        int temp = (c + key);","        fout << (char)temp;","    }","","    fin.close();","    fout.close();","","    cout << \"Encryption completed using key \" << key << \".\" << endl;","}","","void CaesarCipher::Decrypt() {","    cout << \"Enter the decryption key: \";","    cin >> key;","","    fstream fin(inputFile, fstream::in);","    fstream fout(outputFile, fstream::out);","","    char c;","    while (fin >> noskipws >> c) {","        int temp = (c - key);","        fout << (char)temp;","    }","","    fin.close();","    fout.close();","","    cout << \"Decryption completed using key \" << key << \".\" << endl;","}","","int main(int argc, char* argv[]) {","    string inputFile;","    string outputFile;","","    // Command-line argument handling","    for (int i = 1; i < argc; i++) {","        if (strcmp(argv[i], \"-e\") == 0) {","            if (i + 1 < argc) {","                inputFile = argv[i + 1];","                i++; // Skip the next argument, as it has been used as the input file name","            } else {","                cout << \"Error: Missing input file name after -e flag.\" << endl;","                return 1;","            }","        } else if (strcmp(argv[i], \"-d\") == 0) {","            if (i + 1 < argc) {","                inputFile = argv[i + 1];","                i++; // Skip the next argument, as it has been used as the input file name","            } else {","                cout << \"Error: Missing input file name after -d flag.\" << endl;","                return 1;","            }","        } else if (strcmp(argv[i], \"-o\") == 0) {","            if (i + 1 < argc) {","                outputFile = argv[i + 1];","                i++; // Skip the next argument, as it has been used as the output file name","            } else {","                cout << \"Error: Missing output file name after -o flag.\" << endl;","                return 1;","            }","        }","    }","","    if (inputFile.empty() || outputFile.empty()) {","        cout << \"Error: Input and output file names must be provided.\" << endl;","        return 1;","    }","","    // Perform encryption or decryption","    CaesarCipher cipher(inputFile, outputFile);","    if (strcmp(argv[1], \"-e\") == 0) {","        cipher.Encrypt();","    } else if (strcmp(argv[1], \"-d\") == 0) {","        cipher.Decrypt();","    } else {","        cout << \"Error: Invalid command. Use -e for encryption or -d for decryption.\" << endl;","        return 1;","    }","","    return 0;","}",""]}],[{"start":{"row":0,"column":0},"end":{"row":107,"column":0},"action":"remove","lines":["#include <iostream>","#include <fstream>","#include <string>","","using namespace std;","","class CaesarCipher {","    int key;","    string inputFile;","    string outputFile;","","public:","    CaesarCipher(const string& input, const string& output) : inputFile(input), outputFile(output) {}","","    void Encrypt();","    void Decrypt();","};","","void CaesarCipher::Encrypt() {","    cout << \"Enter the encryption key: \";","    cin >> key;","","    fstream fin(inputFile, fstream::in);","    fstream fout(outputFile, fstream::out);","","    char c;","    while (fin >> noskipws >> c) {","        int temp = (c + key);","        fout << (char)temp;","    }","","    fin.close();","    fout.close();","","    cout << \"Encryption completed using key \" << key << \".\" << endl;","}","","void CaesarCipher::Decrypt() {","    cout << \"Enter the decryption key: \";","    cin >> key;","","    fstream fin(inputFile, fstream::in);","    fstream fout(outputFile, fstream::out);","","    char c;","    while (fin >> noskipws >> c) {","        int temp = (c - key);","        fout << (char)temp;","    }","","    fin.close();","    fout.close();","","    cout << \"Decryption completed using key \" << key << \".\" << endl;","}","","int main(int argc, char* argv[]) {","    string inputFile;","    string outputFile;","","    // Command-line argument handling","    for (int i = 1; i < argc; i++) {","        if (strcmp(argv[i], \"-e\") == 0) {","            if (i + 1 < argc) {","                inputFile = argv[i + 1];","                i++; // Skip the next argument, as it has been used as the input file name","            } else {","                cout << \"Error: Missing input file name after -e flag.\" << endl;","                return 1;","            }","        } else if (strcmp(argv[i], \"-d\") == 0) {","            if (i + 1 < argc) {","                inputFile = argv[i + 1];","                i++; // Skip the next argument, as it has been used as the input file name","            } else {","                cout << \"Error: Missing input file name after -d flag.\" << endl;","                return 1;","            }","        } else if (strcmp(argv[i], \"-o\") == 0) {","            if (i + 1 < argc) {","                outputFile = argv[i + 1];","                i++; // Skip the next argument, as it has been used as the output file name","            } else {","                cout << \"Error: Missing output file name after -o flag.\" << endl;","                return 1;","            }","        }","    }","","    if (inputFile.empty() || outputFile.empty()) {","        cout << \"Error: Input and output file names must be provided.\" << endl;","        return 1;","    }","","    // Perform encryption or decryption","    CaesarCipher cipher(inputFile, outputFile);","    if (strcmp(argv[1], \"-e\") == 0) {","        cipher.Encrypt();","    } else if (strcmp(argv[1], \"-d\") == 0) {","        cipher.Decrypt();","    } else {","        cout << \"Error: Invalid command. Use -e for encryption or -d for decryption.\" << endl;","        return 1;","    }","","    return 0;","}",""],"id":9},{"start":{"row":0,"column":0},"end":{"row":107,"column":0},"action":"insert","lines":["#include <iostream>","#include <fstream>","#include <string>","","using namespace std;","","class CaesarCipher {","    int key;","    string inputFile;","    string outputFile;","","public:","    CaesarCipher(const string& input, const string& output) : inputFile(input), outputFile(output) {}","","    void Encrypt();","    void Decrypt();","};","","void CaesarCipher::Encrypt() {","    cout << \"Enter the encryption key: \";","    cin >> key;","","    fstream fin(inputFile, fstream::in);","    fstream fout(outputFile, fstream::out);","","    char c;","    while (fin >> noskipws >> c) {","        int temp = (c + key);","        fout << (char)temp;","    }","","    fin.close();","    fout.close();","","    cout << \"Encryption completed using key \" << key << \".\" << endl;","}","","void CaesarCipher::Decrypt() {","    cout << \"Enter the decryption key: \";","    cin >> key;","","    fstream fin(inputFile, fstream::in);","    fstream fout(outputFile, fstream::out);","","    char c;","    while (fin >> noskipws >> c) {","        int temp = (c - key);","        fout << (char)temp;","    }","","    fin.close();","    fout.close();","","    cout << \"Decryption completed using key \" << key << \".\" << endl;","}","","int main(int argc, char* argv[]) {","    string inputFile;","    string outputFile;","","    // Command-line argument handling","    for (int i = 1; i < argc; i++) {","        if (strcmp(argv[i], \"-e\") == 0) {","            if (i + 1 < argc) {","                inputFile = argv[i + 1];","                i++; // Skip the next argument, as it has been used as the input file name","            } else {","                cout << \"Error: Missing input file name after -e flag.\" << endl;","                return 1;","            }","        } else if (strcmp(argv[i], \"-d\") == 0) {","            if (i + 1 < argc) {","                inputFile = argv[i + 1];","                i++; // Skip the next argument, as it has been used as the input file name","            } else {","                cout << \"Error: Missing input file name after -d flag.\" << endl;","                return 1;","            }","        } else if (strcmp(argv[i], \"-o\") == 0) {","            if (i + 1 < argc) {","                outputFile = argv[i + 1];","                i++; // Skip the next argument, as it has been used as the output file name","            } else {","                cout << \"Error: Missing output file name after -o flag.\" << endl;","                return 1;","            }","        }","    }","","    if (inputFile.empty() || outputFile.empty()) {","        cout << \"Error: Input and output file names must be provided.\" << endl;","        return 1;","    }","","    // Perform encryption or decryption","    CaesarCipher cipher(inputFile, outputFile);","    if (strcmp(argv[1], \"-e\") == 0) {","        cipher.Encrypt();","    } else if (strcmp(argv[1], \"-d\") == 0) {","        cipher.Decrypt();","    } else {","        cout << \"Error: Invalid command. Use -e for encryption or -d for decryption.\" << endl;","        return 1;","    }","","    return 0;","}",""]}],[{"start":{"row":2,"column":17},"end":{"row":3,"column":0},"action":"insert","lines":["",""],"id":10}],[{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"insert","lines":["#include <cstring>",""],"id":11}]]},"ace":{"folds":[],"scrolltop":1140,"scrollleft":0,"selection":{"start":{"row":23,"column":0},"end":{"row":23,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":80,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1690860887822,"hash":"97331f424c77943e196ad7f1db1481db0f314d39"}