{"filter":false,"title":"doubly_linked_list.h","tooltip":"/PRO05/doubly_linked_list.h","undoManager":{"mark":1,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"insert","lines":["#ifndef DOUBLY_LINKED_LIST_H","#define DOUBLY_LINKED_LIST_H","","template <typename T>","class DoublyLinkedList {","private:","    struct Node {","        T data;","        Node* prev;","        Node* next;","        Node(const T& val) : data(val), prev(nullptr), next(nullptr) {}","    };","","    Node* head;","    size_t size;","","public:","    DoublyLinkedList();","    ~DoublyLinkedList();","","    void push(const T& val);","    void pop();","    size_t getSize() const;","    void insert(size_t index, const T& val);","    void remove(size_t index);","    T& at(size_t index) const;","    void print() const;","","    // Rule of three: copy constructor, copy assignment operator","    DoublyLinkedList(const DoublyLinkedList& other);","    DoublyLinkedList& operator=(const DoublyLinkedList& other);","","private:","    void clear();","};","","#endif // DOUBLY_LINKED_LIST_H",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":37,"column":0},"action":"remove","lines":["#ifndef DOUBLY_LINKED_LIST_H","#define DOUBLY_LINKED_LIST_H","","template <typename T>","class DoublyLinkedList {","private:","    struct Node {","        T data;","        Node* prev;","        Node* next;","        Node(const T& val) : data(val), prev(nullptr), next(nullptr) {}","    };","","    Node* head;","    size_t size;","","public:","    DoublyLinkedList();","    ~DoublyLinkedList();","","    void push(const T& val);","    void pop();","    size_t getSize() const;","    void insert(size_t index, const T& val);","    void remove(size_t index);","    T& at(size_t index) const;","    void print() const;","","    // Rule of three: copy constructor, copy assignment operator","    DoublyLinkedList(const DoublyLinkedList& other);","    DoublyLinkedList& operator=(const DoublyLinkedList& other);","","private:","    void clear();","};","","#endif // DOUBLY_LINKED_LIST_H",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":38,"column":0},"action":"insert","lines":["#ifndef DOUBLY_LINKED_LIST_H","#define DOUBLY_LINKED_LIST_H","","template <typename T>","class DoublyLinkedList {","private:","    struct Node {","        T data;","        Node* prev;","        Node* next;","        Node(const T& val) : data(val), prev(nullptr), next(nullptr) {}","    };","","    Node* head;","    size_t size;","","public:","    DoublyLinkedList();","    ~DoublyLinkedList();","","    void push(const T& val);","    void pop();","    size_t getSize() const;","    void insert(size_t index, const T& val);","    void remove(size_t index);","    const T& at(size_t index) const; // For const access","    T& at(size_t index); // For non-const access","    void print() const;","","    // Rule of three: copy constructor, copy assignment operator","    DoublyLinkedList(const DoublyLinkedList& other);","    DoublyLinkedList& operator=(const DoublyLinkedList& other);","","private:","    void clear();","};","","#endif // DOUBLY_LINKED_LIST_H",""]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":38,"column":0},"end":{"row":38,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":81,"mode":"ace/mode/c_cpp"}},"timestamp":1690253314663,"hash":"7cccc42651a5bfc6d82ade64471e86eaad7b304e"}