{"filter":false,"title":"fooditem.cpp","tooltip":"/PRO04/fooditem.cpp","ace":{"folds":[],"scrolltop":360,"scrollleft":0,"selection":{"start":{"row":79,"column":18},"end":{"row":79,"column":18},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":84,"mode":"ace/mode/c_cpp"}},"hash":"d33b5f3ebc5806d34a7f4e8a86813d4a4af63a19","undoManager":{"mark":5,"position":5,"stack":[[{"start":{"row":0,"column":0},"end":{"row":81,"column":0},"action":"insert","lines":["#include \"fooditem.h\"","","FoodItem::FoodItem() {","    name = \"\";","    calories = 0.0;","    totalFat = 0.0;","    totalSugars = 0.0;","    protein = 0.0;","    sodium = 0.0;","}","","FoodItem::FoodItem(std::string name, double calories, double totalFat, double totalSugars, double protein, double sodium) {","    this->name = name;","    this->calories = calories;","    this->totalFat = totalFat;","    this->totalSugars = totalSugars;","    this->protein = protein;","    this->sodium = sodium;","}","","// Accessors","std::string FoodItem::getName() const {","    return name;","}","","double FoodItem::getCalories() const {","    return calories;","}","","double FoodItem::getTotalFat() const {","    return totalFat;","}","","double FoodItem::getTotalSugars() const {","    return totalSugars;","}","","double FoodItem::getProtein() const {","    return protein;","}","","double FoodItem::getSodium() const {","    return sodium;","}","","// Mutators","void FoodItem::setName(std::string name) {","    this->name = name;","}","","void FoodItem::setCalories(double calories) {","    this->calories = calories;","}","","void FoodItem::setTotalFat(double totalFat) {","    this->totalFat = totalFat;","}","","void FoodItem::setTotalSugars(double totalSugars) {","    this->totalSugars = totalSugars;","}","","void FoodItem::setProtein(double protein) {","    this->protein = protein;","}","","void FoodItem::setSodium(double sodium) {","    this->sodium = sodium;","}","","// Addition operator overloading","FoodItem FoodItem::operator+(const FoodItem& other) const {","    FoodItem result;","    result.setName(name + \" + \" + other.name);","    result.setCalories(calories + other.calories);","    result.setTotalFat(totalFat + other.totalFat);","    result.setTotalSugars(totalSugars + other.totalSugars);","    result.setProtein(protein + other.protein);","    result.setSodium(sodium + other.sodium);","    return result;","}",""],"id":11}],[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"remove","lines":["I"],"id":12}],[{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":["I"],"id":13}],[{"start":{"row":68,"column":1},"end":{"row":69,"column":0},"action":"insert","lines":["",""],"id":14}],[{"start":{"row":69,"column":0},"end":{"row":88,"column":0},"action":"insert","lines":["bool FoodItem::exceedsRecommendedCalories() const {","    return calories > 2000.0;","}","","bool FoodItem::exceedsRecommendedTotalFat() const {","    return totalFat > 70.0;","}","","bool FoodItem::exceedsRecommendedTotalSugars() const {","    return totalSugars > 30.0;","}","","bool FoodItem::exceedsRecommendedProtein() const {","    return protein > 50.0;","}","","bool FoodItem::exceedsRecommendedSodium() const {","    return sodium > 2300.0;","}",""],"id":15}],[{"start":{"row":0,"column":0},"end":{"row":101,"column":0},"action":"remove","lines":["#include \"fooditem.h\"","","FoodItem::FoodItem() {","    name = \"\";","    calories = 0.0;","    totalFat = 0.0;","    totalSugars = 0.0;","    protein = 0.0;","    sodium = 0.0;","}","","FoodItem::FoodItem(std::string name, double calories, double totalFat, double totalSugars, double protein, double sodium) {","    this->name = name;","    this->calories = calories;","    this->totalFat = totalFat;","    this->totalSugars = totalSugars;","    this->protein = protein;","    this->sodium = sodium;","}","","// Accessors","std::string FoodItem::getName() const {","    return name;","}","","double FoodItem::getCalories() const {","    return calories;","}","","double FoodItem::getTotalFat() const {","    return totalFat;","}","","double FoodItem::getTotalSugars() const {","    return totalSugars;","}","","double FoodItem::getProtein() const {","    return protein;","}","","double FoodItem::getSodium() const {","    return sodium;","}","","// Mutators","void FoodItem::setName(std::string name) {","    this->name = name;","}","","void FoodItem::setCalories(double calories) {","    this->calories = calories;","}","","void FoodItem::setTotalFat(double totalFat) {","    this->totalFat = totalFat;","}","","void FoodItem::setTotalSugars(double totalSugars) {","    this->totalSugars = totalSugars;","}","","void FoodItem::setProtein(double protein) {","    this->protein = protein;","}","","void FoodItem::setSodium(double sodium) {","    this->sodium = sodium;","}","bool FoodItem::exceedsRecommendedCalories() const {","    return calories > 2000.0;","}","","bool FoodItem::exceedsRecommendedTotalFat() const {","    return totalFat > 70.0;","}","","bool FoodItem::exceedsRecommendedTotalSugars() const {","    return totalSugars > 30.0;","}","","bool FoodItem::exceedsRecommendedProtein() const {","    return protein > 50.0;","}","","bool FoodItem::exceedsRecommendedSodium() const {","    return sodium > 2300.0;","}","","","// Addition operator overloading","FoodItem FoodItem::operator+(const FoodItem& other) const {","    FoodItem result;","    result.setName(name + \" + \" + other.name);","    result.setCalories(calories + other.calories);","    result.setTotalFat(totalFat + other.totalFat);","    result.setTotalSugars(totalSugars + other.totalSugars);","    result.setProtein(protein + other.protein);","    result.setSodium(sodium + other.sodium);","    return result;","}",""],"id":16},{"start":{"row":0,"column":0},"end":{"row":81,"column":0},"action":"insert","lines":["#include \"fooditem.h\"","","FoodItem::FoodItem() {","    name = \"\";","    calories = 0.0;","    totalFat = 0.0;","    totalSugars = 0.0;","    protein = 0.0;","    sodium = 0.0;","}","","FoodItem::FoodItem(std::string name, double calories, double totalFat, double totalSugars, double protein, double sodium) {","    this->name = name;","    this->calories = calories;","    this->totalFat = totalFat;","    this->totalSugars = totalSugars;","    this->protein = protein;","    this->sodium = sodium;","}","","// Accessors","std::string FoodItem::getName() const {","    return name;","}","","double FoodItem::getCalories() const {","    return calories;","}","","double FoodItem::getTotalFat() const {","    return totalFat;","}","","double FoodItem::getTotalSugars() const {","    return totalSugars;","}","","double FoodItem::getProtein() const {","    return protein;","}","","double FoodItem::getSodium() const {","    return sodium;","}","","// Mutators","void FoodItem::setName(std::string name) {","    this->name = name;","}","","void FoodItem::setCalories(double calories) {","    this->calories = calories;","}","","void FoodItem::setTotalFat(double totalFat) {","    this->totalFat = totalFat;","}","","void FoodItem::setTotalSugars(double totalSugars) {","    this->totalSugars = totalSugars;","}","","void FoodItem::setProtein(double protein) {","    this->protein = protein;","}","","void FoodItem::setSodium(double sodium) {","    this->sodium = sodium;","}","","// Addition operator overloading","FoodItem FoodItem::operator+(const FoodItem& other) const {","    FoodItem result;","    result.setName(name + \" + \" + other.name);","    result.setCalories(calories + other.calories);","    result.setTotalFat(totalFat + other.totalFat);","    result.setTotalSugars(totalSugars + other.totalSugars);","    result.setProtein(protein + other.protein);","    result.setSodium(sodium + other.sodium);","    return result;","}",""]}]]},"timestamp":1689652380448}