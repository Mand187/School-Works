{"changed":true,"filter":false,"title":"main_EmployeeData.cpp","tooltip":"/PRO03/main_EmployeeData.cpp","value":"#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass Employee {\nprivate:\n    string name;\n    string title;\n    double wages;\n    double hours;\n\npublic:\n    void setName(string n) {\n        name = n;\n    }\n\n    string getName() const {\n        return name;\n    }\n\n    void setTitle(string t) {\n        title = t;\n    }\n\n    string getTitle() const {\n        return title;\n    }\n\n    void setWages(double w) {\n        if (w >= 0.0) {\n            wages = w;\n        } else {\n            cout << \"Invalid wages\" << endl;\n            wages = 0.0;\n        }\n    }\n\n    double getWages() const {\n        return wages;\n    }\n\n    void setHours(double h) {\n        if (h >= 0.0) {\n            hours = h;\n        } else {\n            cout << \"Invalid hours\" << endl;\n            hours = 0.0;\n        }\n    }\n\n    double getHours() const {\n        return hours;\n    }\n\n    double calculateSalary() const {\n        return wages * hours;\n    }\n};\n\nvector<Employee> getEmployees() {\n    vector<Employee> employees;\n    \n    Employee emp0;\n    emp0.setName(\"Tim Roberts\");\n    emp0.setTitle(\"Driver\");\n    emp0.setWages(15.0);\n    emp0.setHours(0.0); // Set initial hours to 0\n    employees.push_back(emp0);\n\n    Employee emp1;\n    emp1.setName(\"Matt Jones\");\n    emp1.setTitle(\"Sales Representative\");\n    emp1.setWages(15.0);\n    emp1.setHours(0.0); // Set initial hours to 0\n    employees.push_back(emp1);\n\n    Employee emp2;\n    emp2.setName(\"Mike Ehrmantraut\");\n    emp2.setTitle(\"Security Consultant\");\n    emp2.setWages(25.0);\n    emp2.setHours(0.0); // Set initial hours to 0\n    employees.push_back(emp2);\n\n    Employee emp3;\n    emp3.setName(\"Saul Goodman\");\n    emp3.setTitle(\"Legal Consultant\");\n    emp3.setWages(35.0);\n    emp3.setHours(0.0); // Set initial hours to 0\n    employees.push_back(emp3);\n\n    Employee emp4;\n    emp4.setName(\"Walter White\");\n    emp4.setTitle(\"Head Chef\");\n    emp4.setWages(40.0);\n    emp4.setHours(0.0); // Set initial hours to 0\n    employees.push_back(emp4);\n    \n    return employees;\n}\n\n\n\nint main() {\n    int userChoice;\n    string iUser = \"<User>\";\n    vector<Employee> dataEmployees = getEmployees();\n    double userHours;\n    double totalWages = 0.0;\n\n    while (true) {\n        cout << \"| Employee Database |\" << endl;\n        cout << \"Greetings \" << iUser << \", this program displays a list of employees and calculates total wages.\" << endl;\n        cout << \"Please choose an option below\" << endl;\n        cout << \"1. Print List of Employees\" << endl;\n        cout << \"2. Calculate Total Wages\" << endl;\n        cout << \"3. Exit Application\" << endl << endl;\n        cout << \"Make Selection: \";\n        cin >> userChoice;\n        cout << endl;\n\n        if (userChoice == 1) {\n            cout << \"Printing Employee list of \" << dataEmployees.size() << \" employees\" << endl;\n            int vectorNum = 1;\n            for (const Employee& employee : dataEmployees) {\n                cout << vectorNum++ << \". \";\n                cout << \"Name: \" << employee.getName();\n                cout << \" Title: \" << employee.getTitle();\n                cout << \" Wage (Hourly): $\" << employee.getWages();\n                cout << endl;\n            }\n            cout << endl;\n        } else if (userChoice == 2) {\n            totalWages = 0.0;\n            cout << \"Calculating Wages for \" << dataEmployees.size() << \" employees\" << endl;\n            for (Employee& employee : dataEmployees) {\n                cout << \"Enter total hours worked for employee \" << employee.getName() << \": \";\n                cin >> userHours;\n                if (userHours < 0) {\n                    cout << \"Invalid hours. Please enter a non-negative value.\" << endl;\n                    continue;\n                }\n                employee.setHours(userHours);\n                totalWages += employee.calculateSalary();\n                cout << \"Employee \" << employee.getName() << \" earned: $\" << employee.calculateSalary() << endl;\n            }\n            cout << \"Total Wages: $\" << totalWages << endl;\n        } else if (userChoice == 3) {\n            cout << \"Exiting Program\" << endl;\n            break;\n        } else {\n            cout << \"Invalid Selection. Please Try Again\" << endl;\n        }\n\n        cout << endl;\n        cout << \"1. Return to Menu\" << endl;\n        cout << \"2. Exit Program\" << endl;\n        cout << \"Make Selection: \";\n        cin >> userChoice;\n        cout << endl;\n\n        if (userChoice == 2) {\n            cout << \"Exiting Program\" << endl;\n            break;\n        }\n    }\n\n    return 0;\n}\n","undoManager":{"mark":0,"position":-1,"stack":[[{"start":{"row":5,"column":0},"end":{"row":58,"column":2},"action":"remove","lines":["class Employee {","private:","    string name;","    string title;","    double wages;","    double hours;","","public:","    void setName(string n) {","        name = n;","    }","","    string getName() const {","        return name;","    }","","    void setTitle(string t) {","        title = t;","    }","","    string getTitle() const {","        return title;","    }","","    void setWages(double w) {","        if (w >= 0.0) {","            wages = w;","        } else {","            cout << \"Invalid wages\" << endl;","            wages = 0.0;","        }","    }","","    double getWages() const {","        return wages;","    }","","    void setHours(double h) {","        if (h >= 0.0) {","            hours = h;","        } else {","            cout << \"Invalid hours\" << endl;","            hours = 0.0;","        }","    }","","    double getHours() const {","        return hours;","    }","","    double calculateSalary() const {","        return wages * hours;","    }","};"],"id":2},{"start":{"row":5,"column":0},"end":{"row":74,"column":0},"action":"insert","lines":["class FoodItem {","private:","    string name;","    double fat;","    double sugars;","    double protein;","    double sodium;","","public:","    void setName(const string& n) {","        name = n;","    }","","    string getName() const {","        return name;","    }","","    void setFat(double f) {","        if (f >= 0.0) {","            fat = f;","        } else {","            cout << \"Invalid value for fat\" << endl;","            fat = 0.0;","        }","    }","","    double getFat() const {","        return fat;","    }","","    void setSugars(double s) {","        if (s >= 0.0) {","            sugars = s;","        } else {","            cout << \"Invalid value for sugars\" << endl;","            sugars = 0.0;","        }","    }","","    double getSugars() const {","        return sugars;","    }","","    void setProtein(double p) {","        if (p >= 0.0) {","            protein = p;","        } else {","            cout << \"Invalid value for protein\" << endl;","            protein = 0.0;","        }","    }","","    double getProtein() const {","        return protein;","    }","","    void setSodium(double s) {","        if (s >= 0.0) {","            sodium = s;","        } else {","            cout << \"Invalid value for sodium\" << endl;","            sodium = 0.0;","        }","    }","","    double getSodium() const {","        return sodium;","    }","};",""]}]]},"ace":{"folds":[],"scrolltop":1380,"scrollleft":0,"selection":{"start":{"row":122,"column":0},"end":{"row":123,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":97,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1689306952747}